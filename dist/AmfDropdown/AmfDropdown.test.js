var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _jsxFileName='src/AmfDropdown/AmfDropdown.test.js';var _react=require('react');var _react2=_interopRequireDefault(_react);var _reactNative=require('react-native');var _AmfDropdown=require('./AmfDropdown');var _AmfDropdown2=_interopRequireDefault(_AmfDropdown);var _reactTestRenderer=require('react-test-renderer');var _reactTestRenderer2=_interopRequireDefault(_reactTestRenderer);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var item=[{label:'foo',value:'foo'},{label:'bar',value:'bar'}];var onSelect=jest.fn();var validation={required:true};test('AmfDropdown without validation',function(){var props={item:item,onSelect:onSelect};var component=_reactTestRenderer2.default.create(_react2.default.createElement(_AmfDropdown2.default,_extends({},props,{__source:{fileName:_jsxFileName,lineNumber:21}})));var tree=component.toJSON();expect(tree).toMatchSnapshot();});test('AmfDropdown with label',function(){var props={item:item,onSelect:onSelect,label:'Label'};var propsHorizontal=_extends({},props,{layout:'horizontal'});var component=_reactTestRenderer2.default.create(_react2.default.createElement(_AmfDropdown2.default,_extends({},props,{__source:{fileName:_jsxFileName,lineNumber:31}})));var componentHorizontal=_reactTestRenderer2.default.create(_react2.default.createElement(_AmfDropdown2.default,_extends({},propsHorizontal,{__source:{fileName:_jsxFileName,lineNumber:32}})));var tree=component.toJSON();var treeHorizontal=componentHorizontal.toJSON();expect(tree).toMatchSnapshot();expect(treeHorizontal).toMatchSnapshot();});test('AmfDropdown with custom selector',function(){var props={item:item,onSelect:onSelect,selector:_react2.default.createElement(_reactNative.Text,{__source:{fileName:_jsxFileName,lineNumber:43}},'Custom Selector')};var component=_reactTestRenderer2.default.create(_react2.default.createElement(_AmfDropdown2.default,_extends({},props,{__source:{fileName:_jsxFileName,lineNumber:46}})));var tree=component.toJSON();expect(tree).toMatchSnapshot();});test('AmfDropdown with horizontal layout',function(){var props={item:item,onSelect:onSelect,layout:'horizontal'};var component=_reactTestRenderer2.default.create(_react2.default.createElement(_AmfDropdown2.default,_extends({},props,{__source:{fileName:_jsxFileName,lineNumber:58}})));var tree=component.toJSON();expect(tree).toMatchSnapshot();});test('AmfDropdown with required validation',function(){var props={item:item,onSelect:onSelect,validation:validation};var propsWithValue=_extends({},props,{value:'foo'});var component=_reactTestRenderer2.default.create(_react2.default.createElement(_AmfDropdown2.default,_extends({},props,{__source:{fileName:_jsxFileName,lineNumber:72}})));var componentWithValue=_reactTestRenderer2.default.create(_react2.default.createElement(_AmfDropdown2.default,_extends({},propsWithValue,{__source:{fileName:_jsxFileName,lineNumber:73}})));var tree=component.toJSON();var treeWithValue=componentWithValue.toJSON();expect(tree).toMatchSnapshot();expect(treeWithValue).toMatchSnapshot();});test('AmfDropdown with unmatch value',function(){var props={item:item,onSelect:onSelect,validation:validation,value:'No Match'};var component=_reactTestRenderer2.default.create(_react2.default.createElement(_AmfDropdown2.default,_extends({},props,{__source:{fileName:_jsxFileName,lineNumber:87}})));var tree=component.toJSON();expect(tree).toMatchSnapshot();});test('AmfDropdown with empty value',function(){var props={item:item,onSelect:onSelect,validation:validation,value:''};var component=_reactTestRenderer2.default.create(_react2.default.createElement(_AmfDropdown2.default,_extends({},props,{__source:{fileName:_jsxFileName,lineNumber:99}})));var tree=component.toJSON();expect(tree).toMatchSnapshot();});test('AmfDropdown with empty validation object',function(){var props={item:item,onSelect:onSelect,validation:{}};var component=_reactTestRenderer2.default.create(_react2.default.createElement(_AmfDropdown2.default,_extends({},props,{__source:{fileName:_jsxFileName,lineNumber:111}})));var tree=component.toJSON();expect(tree).toMatchSnapshot();});test('AmfDropdown test onSelect function',function(){var props={item:item,onSelect:onSelect};var component=new _AmfDropdown2.default(props);component.onSelect(0,'value');expect(props.onSelect).toHaveBeenCalled();});test('AmfDropdown, test willHide event',function(){var props={item:item,onSelect:onSelect};var component=new _AmfDropdown2.default(props);component.setState=jest.fn();component.onDropdownWillHide();expect(component.setState).toHaveBeenCalled();});test('AmfDropdown, test willShow event',function(){var props={item:item,onSelect:onSelect};var propsWithValidation=_extends({},props,{validation:validation,value:null});var component=new _AmfDropdown2.default(props);component.setState=jest.fn();component.onDropdownWillShow();var componentWithValidation=new _AmfDropdown2.default(propsWithValidation);componentWithValidation.setState=jest.fn();componentWithValidation.onDropdownWillShow();expect(component.setState).toHaveBeenCalled();expect(propsWithValidation.onSelect).toHaveBeenCalled();});test('AmfDropdown, test didUpdate event',function(){var props={item:item,onSelect:onSelect};var component=new _AmfDropdown2.default(props);component.state={isFocused:false};component.validate=jest.fn();component.componentDidUpdate({},{isFocused:true});expect(component.validate).toHaveBeenCalled();var componentFocused=new _AmfDropdown2.default(props);componentFocused.state={isFocused:true};componentFocused.validate=jest.fn();componentFocused.componentDidUpdate({},{isFocused:false});expect(componentFocused.validate).not.toHaveBeenCalled();});test('AmfDropdown, test new item',function(){var props={item:item,onSelect:onSelect};var newItem=[{label:'new',value:'new'}];var expected=newItem.map(function(i){return i.label;});var component=new _AmfDropdown2.default(props);component.componentWillReceiveProps({item:newItem});expect(component.item).toEqual(expected);});