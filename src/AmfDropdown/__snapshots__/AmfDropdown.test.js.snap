// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AmfDropdown with custom selector 1`] = `
<View>
  <View
    style={Object {}}
  >
    <View
      style={undefined}
    >
      <RCTPicker
        items={
          Array [
            Object {
              "label": "foo",
              "textColor": undefined,
              "value": "foo",
            },
            Object {
              "label": "bar",
              "textColor": undefined,
              "value": "bar",
            },
          ]
        }
        onChange={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        selectedIndex={0}
        style={
          Array [
            Object {
              "height": 216,
            },
            undefined,
          ]
        }
      />
    </View>
  </View>
</View>
`;

exports[`AmfDropdown with empty validation object 1`] = `
<View>
  <View
    style={Object {}}
  >
    <View
      style={undefined}
    >
      <RCTPicker
        items={
          Array [
            Object {
              "label": "foo",
              "textColor": undefined,
              "value": "foo",
            },
            Object {
              "label": "bar",
              "textColor": undefined,
              "value": "bar",
            },
          ]
        }
        onChange={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        selectedIndex={0}
        style={
          Array [
            Object {
              "height": 216,
            },
            undefined,
          ]
        }
      />
    </View>
  </View>
</View>
`;

exports[`AmfDropdown with empty value 1`] = `
<View>
  <View
    style={Object {}}
  >
    <View
      style={undefined}
    >
      <RCTPicker
        items={
          Array [
            Object {
              "label": "foo",
              "textColor": undefined,
              "value": "foo",
            },
            Object {
              "label": "bar",
              "textColor": undefined,
              "value": "bar",
            },
          ]
        }
        onChange={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        selectedIndex={0}
        style={
          Array [
            Object {
              "height": 216,
            },
            undefined,
          ]
        }
      />
    </View>
  </View>
  <Text
    accessible={true}
    allowFontScaling={true}
    disabled={false}
    ellipsizeMode="tail"
    style={
      Object {
        "color": "red",
        "margin": 4,
        "marginBottom": 0,
      }
    }
  >
    undefined harus dipilih
  </Text>
</View>
`;

exports[`AmfDropdown with horizontal layout 1`] = `
<View>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
      }
    }
  >
    <View
      style={undefined}
    >
      <RCTPicker
        items={
          Array [
            Object {
              "label": "foo",
              "textColor": undefined,
              "value": "foo",
            },
            Object {
              "label": "bar",
              "textColor": undefined,
              "value": "bar",
            },
          ]
        }
        onChange={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        selectedIndex={0}
        style={
          Array [
            Object {
              "height": 216,
            },
            undefined,
          ]
        }
      />
    </View>
  </View>
</View>
`;

exports[`AmfDropdown with label 1`] = `
<View>
  <View
    style={Object {}}
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      style={
        Array [
          Object {
            "color": "#454545",
            "marginRight": 16,
          },
          Object {
            "marginBottom": 8,
          },
        ]
      }
    >
      Label
    </Text>
    <View
      style={undefined}
    >
      <RCTPicker
        items={
          Array [
            Object {
              "label": "foo",
              "textColor": undefined,
              "value": "foo",
            },
            Object {
              "label": "bar",
              "textColor": undefined,
              "value": "bar",
            },
          ]
        }
        onChange={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        selectedIndex={0}
        style={
          Array [
            Object {
              "height": 216,
            },
            undefined,
          ]
        }
      />
    </View>
  </View>
</View>
`;

exports[`AmfDropdown with label 2`] = `
<View>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
      }
    }
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      style={
        Array [
          Object {
            "color": "#454545",
            "marginRight": 16,
          },
          Object {
            "marginBottom": 0,
          },
        ]
      }
    >
      Label
    </Text>
    <View
      style={undefined}
    >
      <RCTPicker
        items={
          Array [
            Object {
              "label": "foo",
              "textColor": undefined,
              "value": "foo",
            },
            Object {
              "label": "bar",
              "textColor": undefined,
              "value": "bar",
            },
          ]
        }
        onChange={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        selectedIndex={0}
        style={
          Array [
            Object {
              "height": 216,
            },
            undefined,
          ]
        }
      />
    </View>
  </View>
</View>
`;

exports[`AmfDropdown with required validation 1`] = `
<View>
  <View
    style={Object {}}
  >
    <View
      style={undefined}
    >
      <RCTPicker
        items={
          Array [
            Object {
              "label": "foo",
              "textColor": undefined,
              "value": "foo",
            },
            Object {
              "label": "bar",
              "textColor": undefined,
              "value": "bar",
            },
          ]
        }
        onChange={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        selectedIndex={0}
        style={
          Array [
            Object {
              "height": 216,
            },
            undefined,
          ]
        }
      />
    </View>
  </View>
</View>
`;

exports[`AmfDropdown with required validation 2`] = `
<View>
  <View
    style={Object {}}
  >
    <View
      style={undefined}
    >
      <RCTPicker
        items={
          Array [
            Object {
              "label": "foo",
              "textColor": undefined,
              "value": "foo",
            },
            Object {
              "label": "bar",
              "textColor": undefined,
              "value": "bar",
            },
          ]
        }
        onChange={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        selectedIndex={0}
        style={
          Array [
            Object {
              "height": 216,
            },
            undefined,
          ]
        }
      />
    </View>
  </View>
</View>
`;

exports[`AmfDropdown with unmatch value 1`] = `
<View>
  <View
    style={Object {}}
  >
    <View
      style={undefined}
    >
      <RCTPicker
        items={
          Array [
            Object {
              "label": "foo",
              "textColor": undefined,
              "value": "foo",
            },
            Object {
              "label": "bar",
              "textColor": undefined,
              "value": "bar",
            },
          ]
        }
        onChange={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        selectedIndex={0}
        style={
          Array [
            Object {
              "height": 216,
            },
            undefined,
          ]
        }
      />
    </View>
  </View>
</View>
`;

exports[`AmfDropdown without validation 1`] = `
<View>
  <View
    style={Object {}}
  >
    <View
      style={undefined}
    >
      <RCTPicker
        items={
          Array [
            Object {
              "label": "foo",
              "textColor": undefined,
              "value": "foo",
            },
            Object {
              "label": "bar",
              "textColor": undefined,
              "value": "bar",
            },
          ]
        }
        onChange={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        selectedIndex={0}
        style={
          Array [
            Object {
              "height": 216,
            },
            undefined,
          ]
        }
      />
    </View>
  </View>
</View>
`;
